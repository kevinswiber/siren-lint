#! /usr/bin/env node

// vim: set filetype=javascript shiftwidth=2 tabstop=2 expandtab:

var fs = require('fs');
var path = require('path');
var validate = require('../validate');

if (process.stdin.isTTY) {
  if (process.argv.length < 3) {
    printUsage();
  } else {
    var arg = process.argv[2];

    if (['-h', '--help'].indexOf(arg) !== -1) {
      printUsage();
      return;
    }

    if (['-v', '--version'].indexOf(arg) !== -1) {
      printVersion();
      return;
    }

    var filename = arg;
    fs.stat(filename, function(err, stat) {
      if (err) {
        console.error(err.message);
        return;
      }
      fs.readFile(filename, { encoding: 'utf8' }, function(err, content) {
        if (err) {
          console.error(err.message);
        }
        validateContent(content);
      });
    });
  }
} else {
  var content = '';

  process.stdin.setEncoding('utf8');
  process.stdin.on('readable', function() {
    var chunk = this.read();
    if (chunk != null) {
      content += chunk;
    }
  });

  process.stdin.on('end', function() {
    validateContent(content);
  });
}

function validateContent(content) {
  var pruned = extractHttpResponseBody(content);
  var results = validate(pruned);

  console.log(content);
  console.error('');

  if (results.length === 0) {
    console.error('sirenlint: no problems found');
  } else {
    var problems = results.length == 1
      ? '1 problem was found'
      : results.length + ' problems were found';

    console.error('sirenlint: ' + problems + '\n');
  }

  results.forEach(function(r) {
    if (r instanceof validate.ValidationWarning) {
      console.error('warning:', JSON.stringify(r.segments) + ',', r.message);
    } else if (r instanceof validate.ValidationError) {
      console.error('error:', JSON.stringify(r.segments) + ',', r.message);
    }
  });
};

// extractHttpResponseBody removes the status line and headers.
// It also handles HTTP/1.1 100 Continue responses, which
// include two sets of response lines and headers.
function extractHttpResponseBody(content) {
  if (content.length < 5 || content.slice(0, 5) !== 'HTTP/') {
    return content;
  }

  var emptyLineChars = '\r\n\r\n';

  var index = content.indexOf(emptyLineChars);
  if (index !== -1) {
    var hasContinueLine = (content.length > 21
        && content.slice(9, 21).toLowerCase() === '100 continue');

    content = content.slice(index + emptyLineChars.length);

    if (hasContinueLine) {
      return extractHttpResponseBody(content);
    }
  }

  return content;
}

function printUsage() {
  console.log('Usage: sirenlint siren_file');
  console.log('       sirenlint [ -h | --help | -v | --version ]');
  console.log('');
  console.log('If no <siren_file> is specified, sirenlint reads from stdin.');
  console.log('The HTTP response body will be extracted when piping in ');
  console.log('the output of `curl -i ...`.');
}

function printVersion() {
  var package = require(path.join(__dirname, '..', 'package.json'));
  console.log('sirenlint version', package.version);
}
